#!/bin/bash

# Staging Install

# Variables
DEP_NOTIFY_APP="/Applications/Utilities/DEPNotify.app"
DEP_NOTIFY_CONFIG="/var/tmp/depnotify.log"
DEP_NOTIFY_DONE="/var/tmp/com.depnotify.provisioning.done"
TMP_DEBUG_LOG="/var/tmp/depNotifyDebug.log"
SETUP_ASSISTANT_PROCESS=$(pgrep -l "Setup Assistant")
FINDER_PROCESS=$(pgrep -l "Finder")
FULLSCREEN=true


# Wait for Setup Assistant to finish
until [ "$SETUP_ASSISTANT_PROCESS" = "" ]; do
    echo "$(date "+%a %h %d %H:%M:%S"): Setup Assistant Still Running. PID $SETUP_ASSISTANT_PROCESS." >> $TMP_DEBUG_LOG
    sleep 1
    SETUP_ASSISTANT_PROCESS=$(pgrep -l "Setup Assistant")
done

# Wait for Managed Software Center app to install
until [ -d "/Applications/Managed Software Center.app" ]; do
    echo "$(date "+%a %h %d %H:%M:%S"): Managed Software Center not found. Waiting for installation..." >> $TMP_DEBUG_LOG
    sleep 1
done

# Wait for Finder - Helps if user is not DEP enrolled and has to log in
until [ "$FINDER_PROCESS" != "" ]; do
    echo "$(date "+%a %h %d %H:%M:%S"): Finder process not found. Assuming device is at login screen." >> $TMP_DEBUG_LOG
    sleep 1
    FINDER_PROCESS=$(pgrep -l "Finder")
done

# Getting current logged in user
loggedInUser=$( scutil <<< "show State:/Users/ConsoleUser" | awk -F': ' '/[[:space:]]+Name[[:space:]]:/ { if ( $2 != "loginwindow" ) { print $2 }}' )

# Remove old configs if they exist
if [ -f "$DEP_NOTIFY_CONFIG" ]; then
    sudo -u "$loggedInUser" rm "$DEP_NOTIFY_CONFIG"
fi


# Check if finish file is installed. If so, then quit script.
if [ -f "$DEP_NOTIFY_DONE" ]; then
  sudo -u "$loggedInUser" rm -Rf $DEP_NOTIFY_CONFIG
  sudo -u "$loggedInUser" rm -Rf $DEP_NOTIFY_APP
  sudo -u "$loggedInUser" rm -Rf /var/tmp/icons/
  sudo -u "$loggedInUser" rm -Rf /Library/LaunchDaemons/com.aag.launchdep.plist
  sudo -u "$loggedInUser" rm -Rf /var/tmp/depinstall
  exit 0
fi

# Let's not go to sleep
caffeinate -d -i -m -s -u &
caffeinatepid=$!

# Disable Software Updates during imaging and wait for user to be fully logged on
softwareupdate --schedule off

# Open DepNotify
  if [ "$FULLSCREEN" = true ]; then
	sudo -u "$loggedInUser" open -a "$DEP_NOTIFY_APP" --args -munki -path "$DEP_NOTIFY_CONFIG" -fullScreen
  elif [ "$FULLSCREEN" = false ]; then
  	sudo -u "$loggedInUser" open -a "$DEP_NOTIFY_APP" --args -munki -path "$DEP_NOTIFY_CONFIG"
  fi

# Set a main image
echo "Command: Image: /var/tmp/icons/sample.png" >> $DEP_NOTIFY_CONFIG
echo "Command: MainTitle: Welcome To Company!" >> $DEP_NOTIFY_CONFIG

# Set the Body Text. Several other options here but just using what I need
echo "Command: MainText: Welcome to your new Mac. We want you to have a few applications and settings configured before you get started with your new Mac. This process should take 20 to 30 minutes to complete." >> $DEP_NOTIFY_CONFIG
echo "Status:  " >> $DEP_NOTIFY_CONFIG
#echo "Command: ContinueButtonRegister: Continue" >> $DEP_NOTIFY_CONFIG

sleep 10

# Check internet connection
if ping -q -c 1 -W 1 8.8.8.8 >/dev/null; then
 echo "Command: MainText: Internet Connection is good!" >> $DEP_NOTIFY_CONFIG
else
 echo "Status: Please check your internet connection" >> $DEP_NOTIFY_CONFIG
 echo "Command: MainText: No Network Connection Found. If connected to Nighthawk Guest, make sure to make that default wireless and to connect automatically. Close this program by hitting command-control-x or waiting 30 seconds when it closes on it's own then check connection" >> $DEP_NOTIFY_CONFIG
 sleep 30
 echo "Command: Quit" >>  $DEP_NOTIFY_CONFIG
fi


sleep 5

# Check if managedsoftwareupdate is already running and grab PID
if pgrep -f "managedsoftwareupdate" > /dev/null; then
    echo "Managed Software Update is already running." >> $TMP_DEBUG_LOG
    munki_pid=$(pgrep -f "managedsoftwareupdate")
    echo "Managed Software Update PID: $munki_pid." >> $TMP_DEBUG_LOG
else
    # If not running, start the process and grab PID
    sudo /usr/local/munki/managedsoftwareupdate --auto &
    munki_pid=$!
fi


# Monitor Munki installation progress
while true; do
    if ! ps -p "$munki_pid" > /dev/null; then
    	if pgrep -f "managedsoftwareupdate" > /dev/null; then
            munki_pid=$(pgrep -f "managedsoftwareupdate")
            echo "Managed Software Update PID changed to: $munki_pid." >> $TMP_DEBUG_LOG
    else
        break
    	fi
    fi
    echo "$(date "+%a %h %d %H:%M:%S"): Managed Software Update process still running. PID: $munki_pid" >> $TMP_DEBUG_LOG
    echo "Command: MainText: Software installation in progress..." >> $DEP_NOTIFY_CONFIG
    sleep 5
done
echo "$(date "+%a %h %d %H:%M:%S"): Managed Software Update process finished." >> $TMP_DEBUG_LOG
echo "Command: MainText: Software installation completed." >> $DEP_NOTIFY_CONFIG


sleep 10

# Create file to confirm DEPNotify completion
/usr/bin/touch /var/tmp/com.depnotify.provisioning.done

# Remove the Launch Daemon
/bin/rm -Rf /Library/LaunchDaemons/com.aag.launchdep.plist

# Wake back up
kill "$caffeinatepid"

# Renable software Updates
softwareupdate --schedule on

# Restart notification
echo "Command: MainTitle: Restarting" >> $DEP_NOTIFY_CONFIG
echo "Command: MainText: System will restart shortly." >> $DEP_NOTIFY_CONFIG

sleep 10

# Quit
echo "Command: Quit" >>  $DEP_NOTIFY_CONFIG

sleep 3

# Remove DEPNotify and the logs, and munki checkandinstallstartup
/bin/rm -Rf $DEP_NOTIFY_CONFIG
/bin/rm -Rf $DEP_NOTIFY_APP
/bin/rm -Rf /Users/Shared/.com.googlecode.munki.checkandinstallatstartup

sleep 5

#Restart the system
sudo shutdown -r now

exit 0
